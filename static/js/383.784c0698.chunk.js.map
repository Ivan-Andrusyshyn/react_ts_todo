{"version":3,"file":"static/js/383.784c0698.chunk.js","mappings":"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","sources":["Pages/Home/index.tsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport * as S from \"./styles\";\r\n\r\nimport TaskCard from \"../../Components/TaskCard\";\r\nimport AddTask from \"../../Components/AddTask\";\r\nimport { TaskListContext } from \"../../Contexts/taskListContext\";\r\nimport { TaskListType } from \"../../Contexts/typesContext/taskType\";\r\nimport FilterTag from \"../../Components/FilterTag\";\r\nimport Filter from \"../../Img/filter.svg\";\r\nimport { DeleteContext } from \"../../Contexts/delete_edit_Context\";\r\nimport { DeleteType } from \"../../Contexts/typesContext/delete_edit_Type\";\r\nimport DeleteModal from \"../../Components/DeleteModal\";\r\nimport AddModal from \"../../Components/AddModal\";\r\nimport { AddContext } from \"../../Contexts/addContext\";\r\nimport { AddType } from \"../../Contexts/typesContext/addType\";\r\nimport AuthContext from \"../../Contexts/authContext\";\r\nimport { faBars, faUser } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { AuthType } from \"../../Contexts/typesContext/authType\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport SideBar from \"./SideBar\";\r\nimport EditModal from \"../../Components/EditModal/EditModal\";\r\nimport { CategorieContextType } from \"../../Contexts/typesContext/categoriesType\";\r\nimport { CategoriesContext } from \"../../Contexts/categoriesContext\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport LanguageSelector from \"../../i18n/LanguageSelector\";\r\n\r\nconst Home: React.FC = () => {\r\n  const { taskList, doneTasks, notDoneTasks } = useContext(\r\n    TaskListContext\r\n  ) as TaskListType;\r\n  const { userData, isLoading } = useContext(AuthContext) as AuthType;\r\n  const { categList } = useContext(CategoriesContext) as CategorieContextType;\r\n  const { t } = useTranslation();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { showDelete, showEdit } = useContext(DeleteContext) as DeleteType;\r\n  const { showAdd } = useContext(AddContext) as AddType;\r\n  const [listToDisplay, setListToDisplay] = useState(0);\r\n  const listOfLists = [taskList, doneTasks, notDoneTasks];\r\n  const [allActive, setAllActive] = useState(true);\r\n  const [doneActive, setDoneActive] = useState(false);\r\n  const [notDoneActive, setNotDoneActive] = useState(false);\r\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n  const toggleSidebar = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    const clickedElement = e.target as HTMLElement;\r\n    if (clickedElement.id === \"backdrop\") {\r\n      setIsSidebarOpen(!isSidebarOpen);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (categList) {\r\n      const nameNav = categList[0]?.name;\r\n      if (nameNav) {\r\n        navigate(\"/categorie/\" + nameNav);\r\n      }\r\n    }\r\n  }, []);\r\n  const isTablet = useMediaQuery({ minWidth: 320, maxWidth: 920 });\r\n  function handleAll() {\r\n    setListToDisplay(0);\r\n    setAllActive(true);\r\n    setDoneActive(false);\r\n    setNotDoneActive(false);\r\n  }\r\n\r\n  function handleDone() {\r\n    setListToDisplay(1);\r\n    setAllActive(false);\r\n    setDoneActive(true);\r\n    setNotDoneActive(false);\r\n  }\r\n  function handleNotDone() {\r\n    setListToDisplay(2);\r\n    setAllActive(false);\r\n    setDoneActive(false);\r\n    setNotDoneActive(true);\r\n  }\r\n\r\n  return (\r\n    <S.Page>\r\n      <S.BurgerWrapper\r\n        onClick={() => setIsSidebarOpen(!isSidebarOpen)}\r\n        id=\"burger_menu\"\r\n      >\r\n        <FontAwesomeIcon icon={faBars} size=\"xl\" />\r\n      </S.BurgerWrapper>\r\n      {!isTablet && <SideBar />}\r\n      {isSidebarOpen && (\r\n        <S.Backdrop onClick={toggleSidebar} id=\"backdrop\">\r\n          <SideBar />\r\n        </S.Backdrop>\r\n      )}\r\n      <S.Main>\r\n        <LanguageSelector />\r\n        <S.Header>{t(\"homeTitle\")}</S.Header>\r\n        <S.TitleAndFilter>\r\n          <S.Title onClick={handleDone}>{t(\"upBar\")}</S.Title>\r\n          <S.FilterField>\r\n            <div onClick={handleAll}>\r\n              <FilterTag name={t(\"filterAll\")} active={allActive} />\r\n            </div>\r\n            <div onClick={handleDone}>\r\n              <FilterTag name={t(\"filterDn\")} active={doneActive} />\r\n            </div>\r\n            <div onClick={handleNotDone}>\r\n              <FilterTag name={t(\"filterNDone\")} active={notDoneActive} />\r\n            </div>\r\n            <S.FilterIcon src={Filter} />\r\n          </S.FilterField>\r\n        </S.TitleAndFilter>\r\n        {listOfLists[listToDisplay].map((task) => (\r\n          <TaskCard\r\n            key={task.id}\r\n            id={task.id}\r\n            name={task.title}\r\n            list={task.categorie}\r\n            color={task.color}\r\n            done={task.done}\r\n            date={task.date}\r\n          />\r\n        ))}\r\n        <AddTask />\r\n      </S.Main>\r\n      {showEdit && <EditModal />}\r\n      {showDelete && <DeleteModal />}\r\n      {showAdd && <AddModal />}\r\n    </S.Page>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"names":["_ref","useContext","TaskListContext","taskList","doneTasks","notDoneTasks","_ref2","AuthContext","categList","userData","isLoading","CategoriesContext","t","useTranslation","navigate","useNavigate","_ref4","DeleteContext","showDelete","showEdit","showAdd","AddContext","_useState","useState","_useState2","_slicedToArray","listToDisplay","setListToDisplay","listOfLists","_useState3","_useState4","allActive","setAllActive","_useState5","_useState6","doneActive","setDoneActive","_useState7","_useState8","notDoneActive","setNotDoneActive","_useState9","_useState10","isSidebarOpen","setIsSidebarOpen","useEffect","_categList$","nameNav","name","isTablet","useMediaQuery","minWidth","maxWidth","handleDone","_jsxs","S","children","_jsx","onClick","id","FontAwesomeIcon","icon","faBars","size","SideBar","e","target","LanguageSelector","FilterTag","active","src","Filter","map","task","TaskCard","title","list","categorie","color","done","date","AddTask","EditModal","DeleteModal","AddModal"],"sourceRoot":""}