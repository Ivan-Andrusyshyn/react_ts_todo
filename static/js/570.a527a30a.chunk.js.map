{"version":3,"file":"static/js/570.a527a30a.chunk.js","mappings":"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","sources":["Pages/Home/SideBar/AdaptiveSidebar/index.tsx","Pages/Home/index.tsx"],"sourcesContent":["import { useMediaQuery } from \"react-responsive\";\r\nimport SideBar from \"../SideBar\";\r\nimport * as S from \"../../styles\";\r\nimport { SidebarProps } from \"./types\";\r\nconst AdaptiveSideBar: React.FC<SidebarProps> = ({\r\n  isSidebarOpen,\r\n  toggleSidebar,\r\n}) => {\r\n  const isTablet = useMediaQuery({ minWidth: 320, maxWidth: 920 });\r\n  return (\r\n    <>\r\n      {isSidebarOpen && (\r\n        <S.Backdrop onClick={toggleSidebar} id=\"backdrop\">\r\n          {!isTablet && <SideBar />}\r\n          <SideBar />\r\n        </S.Backdrop>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default AdaptiveSideBar;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport * as S from \"./styles\";\r\n\r\nimport TaskCard from \"../../Components/TaskCard\";\r\nimport AddTask from \"../../Components/AddTask\";\r\nimport { TaskListContext } from \"../../Contexts/taskListContext\";\r\nimport { TaskListType } from \"../../Contexts/typesContext/taskType\";\r\nimport FilterTag from \"../../Components/FilterTag\";\r\nimport Filter from \"../../Img/filter.svg\";\r\nimport { DeleteContext } from \"../../Contexts/delete_edit_Context\";\r\nimport { DeleteType } from \"../../Contexts/typesContext/delete_edit_Type\";\r\nimport DeleteModal from \"../../Components/DeleteModal\";\r\nimport AddModal from \"../../Components/AddModal\";\r\nimport { AddContext } from \"../../Contexts/addContext\";\r\nimport { AddType } from \"../../Contexts/typesContext/addType\";\r\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport EditModal from \"../../Components/EditModal/EditModal\";\r\nimport { CategorieContextType } from \"../../Contexts/typesContext/categoriesType\";\r\nimport { CategoriesContext } from \"../../Contexts/categoriesContext\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport LanguageSelector from \"../../i18n/LanguageSelector\";\r\nimport AdaptiveSideBar from \"./SideBar/AdaptiveSidebar\";\r\n\r\nconst Home: React.FC = () => {\r\n  const { taskList, doneTasks, notDoneTasks } = useContext(\r\n    TaskListContext\r\n  ) as TaskListType;\r\n  const { categList } = useContext(CategoriesContext) as CategorieContextType;\r\n  const { t } = useTranslation();\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const { showDelete, showEdit } = useContext(DeleteContext) as DeleteType;\r\n  const { showAdd } = useContext(AddContext) as AddType;\r\n  const [listToDisplay, setListToDisplay] = useState(0);\r\n  const listOfLists = [taskList, doneTasks, notDoneTasks];\r\n  const [allActive, setAllActive] = useState(true);\r\n  const [doneActive, setDoneActive] = useState(false);\r\n  const [notDoneActive, setNotDoneActive] = useState(false);\r\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\r\n  const toggleSidebar = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    const clickedElement = e.target as HTMLElement;\r\n    if (clickedElement.id === \"backdrop\") {\r\n      setIsSidebarOpen(!isSidebarOpen);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (categList) {\r\n      const nameNav = categList[0]?.name;\r\n      if (nameNav) {\r\n        navigate(\"/categorie/\" + nameNav);\r\n      }\r\n    }\r\n  }, []);\r\n  function handleAll() {\r\n    setListToDisplay(0);\r\n    setAllActive(true);\r\n    setDoneActive(false);\r\n    setNotDoneActive(false);\r\n  }\r\n\r\n  function handleDone() {\r\n    setListToDisplay(1);\r\n    setAllActive(false);\r\n    setDoneActive(true);\r\n    setNotDoneActive(false);\r\n  }\r\n  function handleNotDone() {\r\n    setListToDisplay(2);\r\n    setAllActive(false);\r\n    setDoneActive(false);\r\n    setNotDoneActive(true);\r\n  }\r\n\r\n  return (\r\n    <S.Page>\r\n      <S.BurgerWrapper\r\n        onClick={() => setIsSidebarOpen(!isSidebarOpen)}\r\n        id=\"burger_menu\"\r\n      >\r\n        <FontAwesomeIcon icon={faBars} size=\"xl\" />\r\n      </S.BurgerWrapper>\r\n      <AdaptiveSideBar\r\n        isSidebarOpen={isSidebarOpen}\r\n        toggleSidebar={toggleSidebar}\r\n      />\r\n\r\n      <S.Main>\r\n        <LanguageSelector />\r\n        <S.Header>{t(\"homeTitle\")}</S.Header>\r\n        <S.TitleAndFilter>\r\n          <S.Title onClick={handleDone}>{t(\"upBar\")}</S.Title>\r\n          <S.FilterField>\r\n            <div onClick={handleAll}>\r\n              <FilterTag name={t(\"filterAll\")} active={allActive} />\r\n            </div>\r\n            <div onClick={handleDone}>\r\n              <FilterTag name={t(\"filterDn\")} active={doneActive} />\r\n            </div>\r\n            <div onClick={handleNotDone}>\r\n              <FilterTag name={t(\"filterNDone\")} active={notDoneActive} />\r\n            </div>\r\n            <S.FilterIcon src={Filter} />\r\n          </S.FilterField>\r\n        </S.TitleAndFilter>\r\n        {listOfLists[listToDisplay].map((task) => (\r\n          <TaskCard\r\n            key={task.id}\r\n            id={task.id}\r\n            name={task.title}\r\n            list={task.categorie}\r\n            color={task.color}\r\n            done={task.done}\r\n            date={task.date}\r\n          />\r\n        ))}\r\n        <AddTask />\r\n      </S.Main>\r\n      {showEdit && <EditModal />}\r\n      {showDelete && <DeleteModal />}\r\n      {showAdd && <AddModal />}\r\n    </S.Page>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"],"names":["_ref","isSidebarOpen","toggleSidebar","isTablet","useMediaQuery","minWidth","maxWidth","_jsx","_Fragment","children","_jsxs","S","onClick","id","SideBar","useContext","TaskListContext","taskList","doneTasks","notDoneTasks","categList","CategoriesContext","t","useTranslation","navigate","useNavigate","_ref3","DeleteContext","showDelete","showEdit","showAdd","AddContext","_useState","useState","_useState2","_slicedToArray","listToDisplay","setListToDisplay","listOfLists","_useState3","_useState4","allActive","setAllActive","_useState5","_useState6","doneActive","setDoneActive","_useState7","_useState8","notDoneActive","setNotDoneActive","_useState9","_useState10","setIsSidebarOpen","handleDone","useEffect","_categList$","nameNav","name","FontAwesomeIcon","icon","faBars","size","AdaptiveSideBar","e","target","LanguageSelector","FilterTag","active","src","Filter","map","task","TaskCard","title","list","categorie","color","done","date","AddTask","EditModal","DeleteModal","AddModal"],"sourceRoot":""}