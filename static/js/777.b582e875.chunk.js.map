{"version":3,"file":"static/js/777.b582e875.chunk.js","mappings":"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","sources":["Pages/Categorie/styles.ts","Pages/Categorie/index.tsx"],"sourcesContent":["import styled from \"styled-components\";\nexport const Backdrop = styled.div`\n  position: fixed;\n  display: flex;\n  justify-content: flex-start;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  background-color: rgba(0, 0, 0, 0.1);\n  backdrop-filter: blur(4px);\n`;\nexport const BurgerWrapper = styled.div`\n  position: fixed;\n  left: 50px;\n  top: 30px;\n  cursor: pointer;\n`;\nexport const Page = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  flex: row;\n  background-color: #f5f5f5;\n`;\n\nexport const Sidebar = styled.div`\n  height: 100vh;\n  width: 18vw;\n  background-color: white;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  padding: 8px 0;\n  box-sizing: border-box;\n`;\nexport const Img = styled.img`\n  width: 50px;\n  margin: 32px;\n`;\n\nexport const Tabs = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 60vh;\n`;\nexport const Main = styled.div`\n  height: 100vh;\n  width: 82vw;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: start;\n  overflow-y: scroll;\n  @media screen and (min-width: 820px) {\n    width: 100vw;\n  }\n`;\n\nexport const Header = styled.h1`\n  font-size: 40px;\n  font-weight: 400;\n  color: #555;\n  margin: 16px;\n`;\n\nexport const TitleAndFilter = styled.div`\n  height: 20px;\n  width: 70vw;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-top: 16px;\n  margin-bottom: 4px;\n`;\n\nexport const Title = styled.h3`\n  font-size: 24px;\n  color: #555;\n`;\n\nexport const FilterField = styled.div`\n  height: 20px;\n  display: flex;\n  justify-content: center;\n`;\n\nexport const FilterIcon = styled.img`\n  height: 20px;\n  margin: 0 8px;\n`;\n","import React, { useContext, useState } from \"react\";\n\nimport { useParams } from \"react-router-dom\";\n\nimport * as S from \"./styles\";\nimport Logo from \"../../Img/Logo.png\";\nimport TaskFill from \"../../Img/task.png\";\nimport Settings from \"../../Img/settings.svg\";\nimport Folder from \"../../Img/folder.svg\";\nimport Logout from \"../../Img/logout.svg\";\nimport SidebarItem from \"../../Components/SidebarItem\";\nimport ExpandSidebarItem from \"../../Components/ExpandSidebarItem\";\nimport TaskCard from \"../../Components/TaskCard\";\nimport AddTask from \"../../Components/AddTask\";\nimport { TaskListContext } from \"../../Contexts/taskListContext\";\nimport { TaskListType } from \"../../Contexts/typesContext/taskType\";\nimport FilterTag from \"../../Components/FilterTag\";\nimport Filter from \"../../Img/filter.svg\";\nimport { DeleteContext } from \"../../Contexts/delete_edit_Context\";\nimport { DeleteType } from \"../../Contexts/typesContext/delete_edit_Type\";\nimport DeleteModal from \"../../Components/DeleteModal\";\nimport AddModal from \"../../Components/AddModal\";\nimport { AddContext } from \"../../Contexts/addContext\";\nimport { AddType } from \"../../Contexts/typesContext/addType\";\nimport SideBar from \"../Home/SideBar\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\nimport { useMediaQuery } from \"react-responsive\";\nimport EditModal from \"../../Components/EditModal/EditModal\";\n\nconst CategoriePage: React.FC = () => {\n  const { name } = useParams<string>();\n\n  const { taskList, doneTasks, notDoneTasks } = useContext(\n    TaskListContext\n  ) as TaskListType;\n  const { showDelete, showEdit } = useContext(DeleteContext) as DeleteType;\n  const { showAdd } = useContext(AddContext) as AddType;\n  const [listToDisplay, setListToDisplay] = useState(0);\n  const listOfLists = [\n    taskList.filter((task) => task.categorie == name),\n    doneTasks.filter((task) => task.categorie == name),\n    notDoneTasks.filter((task) => task.categorie == name),\n  ];\n\n  const [allActive, setAllActive] = useState(true);\n  const [doneActive, setDoneActive] = useState(false);\n  const [notDoneActive, setNotDoneActive] = useState(false);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n\n  const isTablet = useMediaQuery({ minWidth: 320, maxWidth: 920 });\n\n  function handleAll() {\n    setListToDisplay(0);\n    setAllActive(true);\n    setDoneActive(false);\n    setNotDoneActive(false);\n  }\n\n  function handleDone() {\n    setListToDisplay(1);\n    setAllActive(false);\n    setDoneActive(true);\n    setNotDoneActive(false);\n  }\n  function handleNotDone() {\n    setListToDisplay(2);\n    setAllActive(false);\n    setDoneActive(false);\n    setNotDoneActive(true);\n  }\n  const toggleSidebar = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    const clickedElement = e.target as HTMLElement;\n    if (clickedElement.id === \"backdrop\") {\n      setIsSidebarOpen(!isSidebarOpen);\n    }\n  };\n  return (\n    <S.Page>\n      <S.BurgerWrapper\n        onClick={() => setIsSidebarOpen(!isSidebarOpen)}\n        id=\"burger_menu\"\n      >\n        <FontAwesomeIcon icon={faBars} size=\"xl\" />\n      </S.BurgerWrapper>\n      {!isTablet && <SideBar />}\n      {isSidebarOpen && (\n        <S.Backdrop onClick={toggleSidebar} id=\"backdrop\">\n          <SideBar />\n        </S.Backdrop>\n      )}\n      <S.Main>\n        <S.Header>{name}</S.Header>\n        <S.TitleAndFilter>\n          <S.Title onClick={handleDone}>Tasks </S.Title>\n          <S.FilterField>\n            <div onClick={handleAll}>\n              <FilterTag name=\"All\" active={allActive} />\n            </div>\n            <div onClick={handleDone}>\n              <FilterTag name=\"Done\" active={doneActive} />\n            </div>\n            <div onClick={handleNotDone}>\n              <FilterTag name=\"Not done\" active={notDoneActive} />\n            </div>\n            <S.FilterIcon src={Filter} />\n          </S.FilterField>\n        </S.TitleAndFilter>\n        {listOfLists[listToDisplay].map((task) => (\n          <TaskCard\n            key={task.id}\n            id={task.id}\n            name={task.title}\n            list={task.categorie}\n            color={task.color}\n            done={task.done}\n          />\n        ))}\n        <AddTask></AddTask>\n      </S.Main>\n      {showEdit && <EditModal />}\n      {showDelete && <DeleteModal />}\n      {showAdd && <AddModal />}\n    </S.Page>\n  );\n};\n\nexport default CategoriePage;\n"],"names":["Backdrop","styled","div","_templateObject","_taggedTemplateLiteral","BurgerWrapper","_templateObject2","Page","_templateObject3","Main","_templateObject4","img","_templateObject5","_templateObject6","_templateObject7","Header","h1","_templateObject8","TitleAndFilter","_templateObject9","Title","h3","_templateObject10","FilterField","_templateObject11","FilterIcon","_templateObject12","name","useParams","_ref","useContext","TaskListContext","taskList","doneTasks","notDoneTasks","_ref2","DeleteContext","showDelete","showEdit","showAdd","AddContext","_useState","useState","_useState2","_slicedToArray","listToDisplay","setListToDisplay","listOfLists","filter","task","categorie","_useState3","_useState4","allActive","setAllActive","_useState5","_useState6","doneActive","setDoneActive","_useState7","_useState8","notDoneActive","setNotDoneActive","_useState9","_useState10","isSidebarOpen","setIsSidebarOpen","isTablet","useMediaQuery","minWidth","maxWidth","handleDone","_jsxs","S","children","_jsx","onClick","id","FontAwesomeIcon","icon","faBars","size","SideBar","e","target","FilterTag","active","src","Filter","map","TaskCard","title","list","color","done","AddTask","EditModal","DeleteModal","AddModal"],"sourceRoot":""}